{"version":3,"sources":["auth.service.ts"],"names":[],"mappings":"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","file":"auth.service.js","sourcesContent":["import { AuthHttp } from \"./auth.http\";\r\nimport { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { Http, Headers, Response, RequestOptions } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    authKey = \"auth\";\r\n\r\n    constructor(private http: AuthHttp) { }\r\n\r\n    login(username: string, password: string): any {\r\n        var url = \"api/connect/token\";  // JwtProvider's LoginPath\r\n\r\n        var data = {\r\n            username: username,\r\n            password: password,\r\n            client_id: \"OpenGameList\",\r\n            // required when signing up with username/password\r\n            grant_type: \"password\",\r\n            // space-separated list of scopes for which the token is issued\r\n            scope: \"offline_access profile email\"\r\n        };\r\n\r\n        return this.http.post(\r\n            url,\r\n            this.toUrlEncodedString(data),\r\n            new RequestOptions({\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n                })\r\n            }))\r\n            .map(response => {\r\n                var auth = response.json();\r\n                console.log(\"The follogin auth JSON object has been received:\");\r\n                console.log(auth);\r\n                this.setAuth(auth);\r\n                return auth;\r\n            });\r\n    }\r\n\r\n    logout(): boolean {\r\n        this.setAuth(null);\r\n        return true;\r\n    }\r\n\r\n    // Converts a Json object to urlencoded format\r\n    toUrlEncodedString(data: any) {\r\n        var body = \"\";\r\n        for (var key in data) {\r\n            if (body.length) {\r\n                body += \"&\";\r\n            }\r\n            body += key + \"=\";\r\n            body += encodeURIComponent(data[key]);\r\n        }\r\n        return body;\r\n    }\r\n\r\n    // Persist auth into localStorage or removes it if a NULL argument is given\r\n    setAuth(auth: any): boolean {\r\n        if (auth) {\r\n            localStorage.setItem(this.authKey, JSON.stringify(auth));\r\n        } else {\r\n            localStorage.removeItem(this.authKey);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Retrieves the auth JSON object (or NULL if none)\r\n    getAuth(): any {\r\n        var i = localStorage.getItem(this.authKey);\r\n        if (i) {\r\n            return JSON.parse(i);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Returns TRUE if the user is logged in, FALSE otherwise.\r\n    isLoggedIn(): boolean {\r\n        return localStorage.getItem(this.authKey) != null;\r\n    }\r\n}"]}