{"version":3,"sources":["item.service.ts"],"names":["core_1","require","http_1","Rx_1","ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","res","error","console","Observable","throw","__decorate","Injectable","Http","exports"],"mappings":"6jBAAA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,iBACAE,KAAAF,QAAA,WAIAG,YAAA,WACI,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EAEZC,KAAAC,QAAU,aA2CtB,OAxCIH,EAAAI,UAAAC,UAAA,SAAUC,GACN,IAAIC,EAAML,KAAKC,QAAU,aAEzB,OADW,MAAPG,IAAeC,GAAOD,GACnBJ,KAAKD,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,OAAAA,EAASC,SACzBC,MAAMV,KAAKW,cAIpBb,EAAAI,UAAAU,cAAA,SAAcR,GACV,IAAIC,EAAML,KAAKC,QAAU,iBAEzB,OADW,MAAPG,IAAeC,GAAOD,GACnBJ,KAAKD,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,OAAAA,EAASC,SACzBC,MAAMV,KAAKW,cAIpBb,EAAAI,UAAAW,UAAA,SAAUT,GACN,IAAIC,EAAML,KAAKC,QAAU,aAEzB,OADW,MAAPG,IAAeC,GAAOD,GACnBJ,KAAKD,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,OAAAA,EAASC,SACzBC,MAAMV,KAAKW,cAIpBb,EAAAI,UAAAI,IAAA,SAAIQ,GACA,GAAU,MAANA,EAAc,MAAM,IAAIC,MAAM,mBAClC,IAAIV,EAAML,KAAKC,QAAUa,EACzB,OAAOd,KAAKD,KAAKO,IAAID,GAChBE,IAAI,SAAAS,GAAO,OAAMA,EAAIP,SACrBC,MAAMV,KAAKW,cAGZb,EAAAI,UAAAS,YAAR,SAAoBM,GAGhB,OADAC,QAAQD,MAAMA,GACPpB,KAAAsB,WAAWC,MAAMH,EAAMR,OAAOQ,OAAS,iBA5CzCnB,EAAWuB,YADvB3B,OAAA4B,6CAE6B1B,OAAA2B,QADjBzB,GAAb,GAAa0B,QAAA1B,YAAAA","file":"item.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { Item } from \"./item\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    constructor(private http: Http) { }\r\n\r\n    private baseUrl = \"api/items/\";  // web api URL\r\n\r\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.\r\n    getLatest(num?: number) {\r\n        var url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetMostViewed/{n} Web API method to retrieve the most viewed items.\r\n    getMostViewed(num?: number) {\r\n        var url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetRandom/{n} Web API method to retrieve n random items.\r\n    getRandom(num?: number) {\r\n        var url = this.baseUrl + \"GetRandom/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\r\n    get(id: number) {\r\n        if (id == null) { throw new Error(\"id is required.\"); }\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // output errors to the console.\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}