{"version":3,"sources":["item.service.ts"],"names":["core_1","require","http_1","Rx_1","ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","res","add","item","post","JSON","stringify","getRequestOptions","update","Id","put","delete","RequestOptions","headers","Headers","Content-Type","error","console","Observable","throw","__decorate","Injectable","Http","exports"],"mappings":"6jBAAA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,iBACAE,KAAAF,QAAA,WAIAG,YAAA,WAII,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EADZC,KAAAC,QAAU,aA4EtB,OAxEIH,EAAAI,UAAAC,UAAA,SAAUC,GACN,IAAIC,EAAML,KAAKC,QAAU,aAEzB,OADW,MAAPG,IAAeC,GAAOD,GACnBJ,KAAKD,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,OAAAA,EAASC,SACzBC,MAAMV,KAAKW,cAIpBb,EAAAI,UAAAU,cAAA,SAAcR,GACV,IAAIC,EAAML,KAAKC,QAAU,iBAEzB,OADW,MAAPG,IAAeC,GAAOD,GACnBJ,KAAKD,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,OAAAA,EAASC,SACzBC,MAAMV,KAAKW,cAIpBb,EAAAI,UAAAW,UAAA,SAAUT,GACN,IAAIC,EAAML,KAAKC,QAAU,aAEzB,OADW,MAAPG,IAAeC,GAAOD,GACnBJ,KAAKD,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,OAAAA,EAASC,SACzBC,MAAMV,KAAKW,cAIpBb,EAAAI,UAAAI,IAAA,SAAIQ,GACA,GAAU,MAANA,EAAc,MAAM,IAAIC,MAAM,mBAClC,IAAIV,EAAML,KAAKC,QAAUa,EACzB,OAAOd,KAAKD,KAAKO,IAAID,GAChBE,IAAI,SAAAS,GAAO,OAAMA,EAAIP,SACrBC,MAAMV,KAAKW,cAIpBb,EAAAI,UAAAe,IAAA,SAAIC,GACA,IAAIb,EAAML,KAAKC,QACf,OAAOD,KAAKD,KAAKoB,KAAKd,EAAKe,KAAKC,UAAUH,GAAOlB,KAAKsB,qBACjDf,IAAI,SAAAC,GAAY,OAAAA,EAASC,SACzBC,MAAMV,KAAKW,cAIpBb,EAAAI,UAAAqB,OAAA,SAAOL,GACH,IAAIb,EAAML,KAAKC,QAAUiB,EAAKM,GAC9B,OAAOxB,KAAKD,KAAK0B,IAAIpB,EAAKe,KAAKC,UAAUH,GAAOlB,KAAKsB,qBAChDf,IAAI,SAAAC,GAAY,OAAAA,EAASC,SACzBC,MAAMV,KAAKW,cAIpBb,EAAAI,UAAAwB,OAAA,SAAOZ,GACH,IAAIT,EAAML,KAAKC,QAAUa,EACzB,OAAOd,KAAKD,KAAK2B,OAAOrB,GACnBK,MAAMV,KAAKW,cAIZb,EAAAI,UAAAoB,kBAAR,WACI,OAAO,IAAI1B,OAAA+B,gBACPC,QAAS,IAAIhC,OAAAiC,SACTC,eAAgB,wBAKpBhC,EAAAI,UAAAS,YAAR,SAAoBoB,GAGhB,OADAC,QAAQD,MAAMA,GACPlC,KAAAoC,WAAWC,MAAMH,EAAMtB,OAAOsB,OAAS,iBA7EzCjC,EAAWqC,YADvBzC,OAAA0C,6CAK6BxC,OAAAyC,QAJjBvC,GAAb,GAAawC,QAAAxC,YAAAA","file":"item.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { Item } from \"./item\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    //private Data: { Latest: Item[], MostViewed: Item[], Random: Item[] };\r\n\r\n    private baseUrl = \"api/items/\";  // web api URL\r\n    constructor(private http: Http) { }\r\n\r\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.\r\n    getLatest(num?: number) {\r\n        var url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetMostViewed/{n} Web API method to retrieve the most viewed items.\r\n    getMostViewed(num?: number) {\r\n        var url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetRandom/{n} Web API method to retrieve n random items.\r\n    getRandom(num?: number) {\r\n        var url = this.baseUrl + \"GetRandom/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\r\n    get(id: number) {\r\n        if (id == null) { throw new Error(\"id is required.\"); }\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [POST] /api/items/ Web API  method to add a new item.\r\n    add(item: Item) {\r\n        var url = this.baseUrl;\r\n        return this.http.post(url, JSON.stringify(item), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [PUT] /api/items/{id} Web API method to update an existing item.\r\n    update(item: Item) {\r\n        var url = this.baseUrl + item.Id;\r\n        return this.http.put(url, JSON.stringify(item), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\r\n    delete(id: number) {\r\n        var url = this.baseUrl + id;\r\n        return this.http.delete(url)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // returns a viable RequestOptions object to handle Json requests\r\n    private getRequestOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        });\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // output errors to the console.\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}